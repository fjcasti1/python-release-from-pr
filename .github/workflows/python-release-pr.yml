name: "Python Release PR"

on:
    push:
        branches: [pysdk/v*]
    pull_request:
        branches: [pysdk/v*]

# concurrency:
#     group: test-python-${{ github.head_ref }}
#     cancel-in-progress: true

# TODOS:
#  - Tag a commit action
#  - Permissions
#  - Concurrency settings
#  - Should we cache artifacts?
env:
    python-version: 3.8
    pip-version: 23.1.2
    build-version: 0.10.0
    check-wheel-contents-version: 0.4.0
    twine-version: 4.0.2
jobs:
    warning:
        name: "Warnning for release PR"
        runs-on: ubuntu-latest
        steps:
            - run: echo "Show a warning for this PR will create a release of our python package, once merged"
    lint:
        name: "Test Python Style"
        uses: ./.github/workflows/style-python.yml
    test:
        name: "Run Python tests"
        runs-on: ubuntu-latest
        steps:
            - run: |
                  echo "Running tests..."
    versioning:
        name: "Verify version bump"
        runs-on: ubuntu-latest
        env:
            package-dir: "./my_helper_package"
        steps:
            - name: Checkout Repository (Head ref)
              uses: actions/checkout@v3
              with:
                  ref: ${{ github.head_ref }}
            - name: Checkout Repository (Base ref)
              uses: actions/checkout@v3
              with:
                  ref: ${{ github.base_ref }}
            # - name: Print GH head_ref
            #   run: |
            #       echo ${{ github.head_ref }}
            # - name: Print GH base_ref
            #   run: |
            #       echo ${{ github.base_ref }}
            - working-directory: ${{ env.package-dir }}
              run: |
                  git diff --exit-code origin/${{ github.base_ref}} origin/${{ github.head_ref }} src/ilsadvbisnvavojebaij/__init__.py
    build:
        needs: [lint, test, versioning]
        name: "Build Python package"
        runs-on: ubuntu-latest
        env:
            package-dir: "./my_helper_package"
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3
            - name: Set up python ${{ env.python-version }}
              id: setup-python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.python-version }}
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip==${{ env.pip-version }}
                  pip install build==${{ env.build-version }} check-wheel-contents==${{ env.check-wheel-contents-version }} twine==${{ env.twine-version }}
            - name: Build
              working-directory: ${{ env.package-dir }}
              run: python3 -m build
            - name: Check wheels
              working-directory: ${{ env.package-dir }}
              run: |
                  python3 -m check_wheel_contents dist/
                  python3 -m twine check dist/*
            - name: Upload artifacts
              if: github.event_name == 'push'
              uses: actions/upload-artifact@v3
              with:
                  name: dist-files
                  path: ${{ env.package-dir }}/dist
    publish-package:
        needs: build
        if: github.event_name == 'push' || github.event_path == 'workflow_dispatch'
        name: "Publish Python Package"
        runs-on: ubuntu-latest
        steps:
            #   env:
            #       GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            #   uses: actions/github-script@v6
            #   with:
            #       script: |
            #           github.rest.git.createRef({
            #             owner: context.repo.owner,
            #             repo: context.repo.repo,
            #             ref: 'refs/tags/<tagname>',
            #             sha: context.sha
            #           })
            - name: "Sync to public repo"
              run: |
                  echo "Syncing to public repo..."
            # FROM HERE ON I CAN WRITE AN ACTION: python-release-on-pr
            - name: Download artifacts
              uses: actions/download-artifact@v3
              with:
                  name: dist-files
                  path: dist/
            - name: Set up python ${{ env.python-version }}
              id: setup-python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.python-version }}
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip==${{ env.pip-version }}
                  pip install twine==${{ env.twine-version }}
            - name: "Tag commit"
              run: |
                  echo "Should tag a commit on merge"
            - name: "Publish Python package to Pypi"
              env:
                  TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
                  TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
              run: |
                  echo "Publishing to Pypi..."
                  twine upload --verbose --non-interactive dist/*
