name: "Python Release"

on:
    push:
        branches: [main]
        paths:
            - "my_helper_package/src/ilsadvbisnvavojebaij/**"
            - ".github/workflows/python-release.yml"
    pull_request:
        branches: [main]
        paths:
            - "my_helper_package/src/ilsadvbisnvavojebaij/**"
            - ".github/workflows/python-release.yml"

env:
    python-version: 3.9
    pip-version: 21.2.2
    build-version: 0.10.0
    check-wheel-contents-version: 0.4.0
    twine-version: 4.0.2
    pytest-version: 6.2.2
    package-dir: ./my_helper_package/
    package-name: ilsadvbisnvavojebaij
permissions:
    contents: read
    deployments: write

jobs:
    lint:
        name: "Test Python Style"
        uses: ./.github/workflows/style-python.yml

    versioning:
        name: "Verify version bump"
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository (Head ref)
              uses: actions/checkout@v3
              with:
                  ref: ${{ github.head_ref }}
            - name: Checkout Repository (Base ref)
              uses: actions/checkout@v3
              with:
                  ref: ${{ github.base_ref }}
            - name: Check version diff
              working-directory: ${{ env.package-dir }}
              env:
                  version-file: ${{ env.package-name }}/__init__.py
                  RED: \033[0;31m
                  GREEN: \033[0;32m
              # git diff --exit-code returns 1 when changes are detected and 0 when they are not
              run: |
                  if git diff --exit-code origin/${{ github.base_ref}} origin/${{ github.head_ref }} ${{ env.version-file}}; then
                    printf "${{ env.RED }}Version unchanged, check file ${{ env.version-file}}\n"
                    exit 1
                  else
                    printf "${{env.GREEN}}Version changed, thank you!"
                    exit 0
                  fi

    # testing_old_versions:
    #     name: "Test for old python runtime"
    #     runs-on: ${{ matrix.os }}
    #     strategy:
    #         matrix:
    #             os: [ubuntu-20.04, macos-latest]
    #             py-version: ["3.6", "3.7", "3.8"]
    #     steps:
    #         - name: Checkout Repository
    #           uses: actions/checkout@v3
    #         - name: Set up python ${{ matrix.py-version }}
    #           uses: actions/setup-python@v4
    #           with:
    #               python-version: ${{ matrix.py-version }}
    #         - name: Install dependencies
    #           working-directory: ${{ env.package-dir }}
    #           # Do not install AutoEmbeddings & LLM_Evaluation extras since they are not supported in python<3.8. See https://docs.arize.com/arize/api-reference/python-sdk
    #           run: |
    #               python -m pip install --upgrade pip==${{ env.pip-version }}
    #               pip install ".[MimicExplainer]" pytest==${{ env.pytest-version }}
    #         - name: Install dataclasses if python_vesion = 3.6
    #           if: ${{ matrix.py-version == '3.6' }}
    #           run: |
    #               pip install dataclasses
    #         - name: Run tests
    #           working-directory: ${{ env.package-dir }}
    #           run: |
    #               pytest -ra --import-mode=append --doctest-modules --ignore=tests/pandas/surrogate_explainer --ignore=tests/pandas/generative/llm_evaluation tests

    build:
        # needs: [lint, versioning, testing_old_versions]
        needs: [lint, versioning]
        name: "Build Python package"
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3
            - name: Set up python ${{ env.python-version }}
              id: setup-python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.python-version }}
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip==${{ env.pip-version }}
                  pip install build==${{ env.build-version }} check-wheel-contents==${{ env.check-wheel-contents-version }} twine==${{ env.twine-version }}
            - name: Build
              working-directory: ${{ env.package-dir }}
              run: python3 -m build
            - name: Check wheels
              working-directory: ${{ env.package-dir }}
              run: |
                  python3 -m check_wheel_contents dist/
                  python3 -m twine check dist/*
            - name: Upload artifacts
              if: github.event_name == 'push'
              uses: actions/upload-artifact@v3
              with:
                  name: dist-files
                  path: ${{ env.package-dir }}/dist

    publish-package:
        needs: build
        if: github.event_name == 'push'
        name: "Publish Python Package"
        runs-on: ubuntu-latest
        permissions:
            contents: write
        outputs:
            package-new-version: ${{ steps.discover-version.outputs.package-new-version }}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3
            - name: Discover release version
              id: discover-version
              working-directory: ${{ env.package-dir }}
              run: |
                  version=$(python3 -c "import arize; print(arize.__version__)")
                  echo "package-new-version=$version" >> "$GITHUB_OUTPUT"

            - name: Download artifacts
              uses: actions/download-artifact@v3
              with:
                  name: dist-files
                  path: dist/

            - name: Create Release
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  gh release create pysdk/v${{ steps.discover-version.outputs.package-new-version }} \
                  --title "Python SDK ${{ steps.discover-version.outputs.package-new-version }}" \
                  --draft \
                  --target ${{ github.sha }} \
                  dist/*

            - name: Set up python ${{ env.python-version }}
              id: setup-python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.python-version }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip==${{ env.pip-version }}
                  pip install twine==${{ env.twine-version }}

            - name: Publish Python package to Pypi
              env:
                  TWINE_USERNAME: ${{ secrets.ARIZE_PYPI_USERNAME }}
                  TWINE_PASSWORD: ${{ secrets.ARIZE_PYPI_PASSWORD }}
              run: |
                  echo "Publishing to Pypi..."
                  twine upload --verbose --non-interactive dist/*

#      - name: Sync to public repo
#        run: |
#          echo "Syncing to public repo..."
